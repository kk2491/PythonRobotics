"""

Frenet optimal trajectory generator

author: Atsushi Sakai (@Atsushi_twi)

Ref:

- [Optimal Trajectory Generation for Dynamic Street Scenarios in a Frenet Frame](https://www.researchgate.net/profile/Moritz_Werling/publication/224156269_Optimal_Trajectory_Generation_for_Dynamic_Street_Scenarios_in_a_Frenet_Frame/links/54f749df0cf210398e9277af.pdf)

- [Optimal trajectory generation for dynamic street scenarios in a Frenet Frame](https://www.youtube.com/watch?v=Cj6tAQe7UCY)

"""

import numpy as np
import matplotlib.pyplot as plt
import copy
import math
import cubic_spline_planner

SIM_LOOP = 500

# Parameter
MAX_SPEED = 50.0 / 3.6  # maximum speed [m/s]
MAX_ACCEL = 2.0  # maximum acceleration [m/ss]
MAX_CURVATURE = 1.0  # maximum curvature [1/m]
MAX_ROAD_WIDTH = 7.0  # maximum road width [m]
D_ROAD_W = 1.0  # road width sampling length [m]
DT = 0.2  # time tick [s]
MAXT = 5.0  # max prediction time [m]
MINT = 4.0  # min prediction time [m]
TARGET_SPEED = 30.0 / 3.6  # target speed [m/s] 8.33
D_T_S = 5.0 / 3.6  # target speed sampling length [m/s] 1.388
N_S_SAMPLE = 1  # sampling number of target speed
ROBOT_RADIUS = 2.0  # robot radius [m]

# cost weights
KJ = 0.1
KT = 0.1
KD = 1.0
KLAT = 1.0
KLON = 1.0

show_animation = True


class quintic_polynomial:

    def __init__(self, xs, vxs, axs, xe, vxe, axe, T):

        # calc coefficient of quintic polynomial
        self.xs = xs
        self.vxs = vxs
        self.axs = axs
        self.xe = xe
        self.vxe = vxe
        self.axe = axe

        self.a0 = xs
        self.a1 = vxs
        self.a2 = axs / 2.0

        A = np.array([[T**3, T**4, T**5],
                      [3 * T ** 2, 4 * T ** 3, 5 * T ** 4],
                      [6 * T, 12 * T ** 2, 20 * T ** 3]])
        b = np.array([xe - self.a0 - self.a1 * T - self.a2 * T**2,
                      vxe - self.a1 - 2 * self.a2 * T,
                      axe - 2 * self.a2])
        x = np.linalg.solve(A, b)

        self.a3 = x[0]
        self.a4 = x[1]
        self.a5 = x[2]

    def calc_point(self, t):
        xt = self.a0 + self.a1 * t + self.a2 * t**2 + \
            self.a3 * t**3 + self.a4 * t**4 + self.a5 * t**5

        return xt

    def calc_first_derivative(self, t):
        xt = self.a1 + 2 * self.a2 * t + \
            3 * self.a3 * t**2 + 4 * self.a4 * t**3 + 5 * self.a5 * t**4

        return xt

    def calc_second_derivative(self, t):
        xt = 2 * self.a2 + 6 * self.a3 * t + 12 * self.a4 * t**2 + 20 * self.a5 * t**3

        return xt

    def calc_third_derivative(self, t):
        xt = 6 * self.a3 + 24 * self.a4 * t + 60 * self.a5 * t**2

        return xt


class quartic_polynomial:

    def __init__(self, xs, vxs, axs, vxe, axe, T):

        # calc coefficient of quintic polynomial
        self.xs = xs
        self.vxs = vxs
        self.axs = axs
        self.vxe = vxe
        self.axe = axe

        self.a0 = xs
        self.a1 = vxs
        self.a2 = axs / 2.0

        A = np.array([[3 * T ** 2, 4 * T ** 3],
                      [6 * T, 12 * T ** 2]])
        b = np.array([vxe - self.a1 - 2 * self.a2 * T,
                      axe - 2 * self.a2])
        x = np.linalg.solve(A, b)

        self.a3 = x[0]
        self.a4 = x[1]

    def calc_point(self, t):
        xt = self.a0 + self.a1 * t + self.a2 * t**2 + \
            self.a3 * t**3 + self.a4 * t**4

        return xt

    def calc_first_derivative(self, t):
        xt = self.a1 + 2 * self.a2 * t + \
            3 * self.a3 * t**2 + 4 * self.a4 * t**3

        return xt

    def calc_second_derivative(self, t):
        xt = 2 * self.a2 + 6 * self.a3 * t + 12 * self.a4 * t**2

        return xt

    def calc_third_derivative(self, t):
        xt = 6 * self.a3 + 24 * self.a4 * t

        return xt


class Frenet_path:

    def __init__(self):
        self.t = []
        self.d = []
        self.d_d = []
        self.d_dd = []
        self.d_ddd = []
        self.s = []
        self.s_d = []
        self.s_dd = []
        self.s_ddd = []
        self.cd = 0.0
        self.cv = 0.0
        self.cf = 0.0

        self.x = []
        self.y = []
        self.yaw = []
        self.ds = []
        self.c = []


def calc_frenet_paths(c_speed, c_d, c_d_d, c_d_dd, s0):

    frenet_paths = []

    # generate path to each offset goal
    for di in np.arange(-MAX_ROAD_WIDTH, MAX_ROAD_WIDTH, D_ROAD_W):

        # Lateral motion planning
        for Ti in np.arange(MINT, MAXT, DT):
            fp = Frenet_path()

            lat_qp = quintic_polynomial(c_d, c_d_d, c_d_dd, di, 0.0, 0.0, Ti)

            fp.t = [t for t in np.arange(0.0, Ti, DT)]
            fp.d = [lat_qp.calc_point(t) for t in fp.t]
            fp.d_d = [lat_qp.calc_first_derivative(t) for t in fp.t]
            fp.d_dd = [lat_qp.calc_second_derivative(t) for t in fp.t]
            fp.d_ddd = [lat_qp.calc_third_derivative(t) for t in fp.t]

            # Loongitudinal motion planning (Velocity keeping)
            for tv in np.arange(TARGET_SPEED - D_T_S * N_S_SAMPLE, TARGET_SPEED + D_T_S * N_S_SAMPLE, D_T_S):
                tfp = copy.deepcopy(fp)
                lon_qp = quartic_polynomial(s0, c_speed, 0.0, tv, 0.0, Ti)

                tfp.s = [lon_qp.calc_point(t) for t in fp.t]
                tfp.s_d = [lon_qp.calc_first_derivative(t) for t in fp.t]
                tfp.s_dd = [lon_qp.calc_second_derivative(t) for t in fp.t]
                tfp.s_ddd = [lon_qp.calc_third_derivative(t) for t in fp.t]

                Jp = sum(np.power(tfp.d_ddd, 2))  # square of jerk
                Js = sum(np.power(tfp.s_ddd, 2))  # square of jerk

                # square of diff from target speed
                ds = (TARGET_SPEED - tfp.s_d[-1])**2

                tfp.cd = KJ * Jp + KT * Ti + KD * tfp.d[-1]**2
                tfp.cv = KJ * Js + KT * Ti + KD * ds
                tfp.cf = KLAT * tfp.cd + KLON * tfp.cv

                frenet_paths.append(tfp)

    return frenet_paths


def calc_global_paths(fplist, csp):

    for fp in fplist:

        # calc global positions
        for i in range(len(fp.s)):
            ix, iy = csp.calc_position(fp.s[i])
            if ix is None:
                break
            iyaw = csp.calc_yaw(fp.s[i])
            di = fp.d[i]
            fx = ix + di * math.cos(iyaw + math.pi / 2.0)
            fy = iy + di * math.sin(iyaw + math.pi / 2.0)
            fp.x.append(fx)
            fp.y.append(fy)

        # calc yaw and ds
        for i in range(len(fp.x) - 1):
            dx = fp.x[i + 1] - fp.x[i]
            dy = fp.y[i + 1] - fp.y[i]
            fp.yaw.append(math.atan2(dy, dx))
            fp.ds.append(math.sqrt(dx**2 + dy**2))

        fp.yaw.append(fp.yaw[-1])
        fp.ds.append(fp.ds[-1])

        # calc curvature
        for i in range(len(fp.yaw) - 1):
            fp.c.append((fp.yaw[i + 1] - fp.yaw[i]) / fp.ds[i])

    return fplist


def check_collision(fp, ob):

    for i in range(len(ob[:, 0])):
        d = [((ix - ob[i, 0])**2 + (iy - ob[i, 1])**2)
             for (ix, iy) in zip(fp.x, fp.y)]

        collision = any([di <= ROBOT_RADIUS**2 for di in d])

        if collision:
            return False

    return True


def check_paths(fplist, ob):

    okind = []
    for i, _ in enumerate(fplist):
        if any([v > MAX_SPEED for v in fplist[i].s_d]):  # Max speed check
            continue
        elif any([abs(a) > MAX_ACCEL for a in fplist[i].s_dd]):  # Max accel check
            continue
        elif any([abs(c) > MAX_CURVATURE for c in fplist[i].c]):  # Max curvature check
            continue
        elif not check_collision(fplist[i], ob):
            continue

        okind.append(i)

    return [fplist[i] for i in okind]


def frenet_optimal_planning(csp, s0, c_speed, c_d, c_d_d, c_d_dd, ob):

    # Coefficients
    fplist = calc_frenet_paths(c_speed, c_d, c_d_d, c_d_dd, s0)
    # Path points
    fplist = calc_global_paths(fplist, csp)
    # acceleration check, velocity check, collision
    fplist = check_paths(fplist, ob)

    # find minimum cost path
    mincost = float("inf")
    bestpath = None
    for fp in fplist:
        if mincost >= fp.cf:
            mincost = fp.cf
            bestpath = fp

    return bestpath


def generate_target_course(x, y):
    csp = cubic_spline_planner.Spline2D(x, y)
    s = np.arange(0, csp.s[-1], 0.1)

    rx, ry, ryaw, rk = [], [], [], []
    for i_s in s:
        ix, iy = csp.calc_position(i_s)
        rx.append(ix)
        ry.append(iy)
        ryaw.append(csp.calc_yaw(i_s))
        rk.append(csp.calc_curvature(i_s))

    return rx, ry, ryaw, rk, csp


def main():
    print(__file__ + " start!!")

    # way points
    wx = [0.0, 10.0, 20.5, 35.0, 70.5, 90.50, 120.40]
    wy = [0.0, -6.0, 5.0, 6.5, 0.0, 4.0, 7.0]

    # wx = [142.636, 140.637, 138.637, 136.638, 134.638, 132.639, 130.64, 128.64, 126.641, 124.64200000000001, 122.64200000000001, 120.64299999999999, 118.64299999999999, 116.64399999999999, 114.645, 112.645, 110.646, 108.647, 106.647, 104.648, 102.649, 100.649, 98.6498, 96.6504, 94.65100000000001, 92.6517, 90.6523, 88.6529, 86.6536, 84.6542, 82.6548, 80.6554, 78.6561, 76.6567, 74.6573, 72.658, 70.6586, 68.6592, 66.6599, 64.6605, 62.6611, 60.6618, 58.6624, 56.663000000000004, 54.6637, 52.6643, 50.6649, 48.6656, 46.6662, 44.6668, 42.6674, 40.6681, 38.6687, 36.6693, 34.67, 32.6706, 30.6712, 28.6719, 26.6725, 24.6731, 22.6738, 20.6744, 18.675, 16.6756, 14.6763, 12.6769, 10.6775, 8.67817, 6.67881, 4.6794400000000005, 2.68007, 0.6807, -1.31867, -3.3180400000000003, -5.31741, -7.3167800000000005, -9.316139999999999, -11.3155, -13.3149, -15.3143, -17.3136, -19.313, -21.3124, -23.3117, -25.3111, -27.3105, -29.3098, -31.3092, -33.3086, -35.3079, -37.3073, -39.3067, -41.306000000000004, -43.3054, -45.3048, -47.3041, -49.3035, -51.4572, -53.8401, -56.2095]

    # wy = [-200.922, -200.972, -201.02200000000002, -201.07299999999998, -201.123, -201.173, -201.22299999999998, -201.274, -201.324, -201.37400000000002, -201.424, -201.475, -201.525, -201.575, -201.625, -201.676, -201.726, -201.77599999999998, -201.826, -201.877, -201.92700000000002, -201.977, -202.02700000000002, -202.078, -202.128, -202.178, -202.22799999999998, -202.27900000000002, -202.329, -202.37900000000002, -202.429, -202.48, -202.53, -202.58, -202.63, -202.68, -202.731, -202.78099999999998, -202.831, -202.88099999999997, -202.93200000000002, -202.982, -203.032, -203.082, -203.13299999999998, -203.183, -203.233, -203.283, -203.334, -203.38400000000001, -203.43400000000003, -203.484, -203.535, -203.585, -203.635, -203.685, -203.736, -203.78599999999997, -203.83599999999998, -203.886, -203.937, -203.987, -204.037, -204.08700000000002, -204.138, -204.188, -204.238, -204.28799999999998, -204.33900000000003, -204.389, -204.43900000000002, -204.489, -204.54, -204.59, -204.64, -204.69, -204.74, -204.791, -204.84099999999998, -204.891, -204.94099999999997, -204.99200000000002, -205.042, -205.092, -205.142, -205.19299999999998, -205.243, -205.293, -205.343, -205.394, -205.44400000000002, -205.49400000000003, -205.544, -205.595, -205.645, -205.695, -205.745, -205.78599999999997, -205.688, -205.416]

    '''
    wx = [142.636, 140.637, 138.637, 136.638, 134.638, 132.639, 130.64, 128.64, 126.641, 124.64200000000001,
          122.64200000000001, 120.64299999999999, 118.64299999999999, 116.64399999999999, 114.645, 112.645, 110.646,
          108.647, 106.647, 104.648, 102.649, 100.649, 98.6498, 96.6504, 94.65100000000001, 92.6517, 90.6523, 88.6529,
          86.6536, 84.6542, 82.6548, 80.6554, 78.6561, 76.6567, 74.6573, 72.658, 70.6586, 68.6592, 66.6599, 64.6605,
          62.6611, 60.6618, 58.6624, 56.663000000000004, 54.6637, 52.6643, 50.6649, 48.6656, 46.6662, 44.6668, 42.6674,
          40.6681, 38.6687, 36.6693, 34.67, 32.6706, 30.6712, 28.6719, 26.6725, 24.6731, 22.6738, 20.6744, 18.675,
          16.6756, 14.6763, 12.6769, 10.6775, 8.67817, 6.67881, 4.6794400000000005, 2.68007, 0.6807, -1.31867,
          -3.3180400000000003, -5.31741, -7.3167800000000005, -9.316139999999999, -11.3155, -13.3149, -15.3143,
          -17.3136, -19.313, -21.3124, -23.3117, -25.3111, -27.3105, -29.3098, -31.3092, -33.3086, -35.3079, -37.3073,
          -39.3067, -41.306000000000004, -43.3054, -45.3048, -47.3041, -49.3035, -51.4572, -53.8401, -56.2095]

    wy = [-200.922, -200.972, -201.02200000000002, -201.07299999999998, -201.123, -201.173, -201.22299999999998,
          -201.274, -201.324, -201.37400000000002, -201.424, -201.475, -201.525, -201.575, -201.625, -201.676, -201.726,
          -201.77599999999998, -201.826, -201.877, -201.92700000000002, -201.977, -202.02700000000002, -202.078,
          -202.128, -202.178, -202.22799999999998, -202.27900000000002, -202.329, -202.37900000000002, -202.429,
          -202.48, -202.53, -202.58, -202.63, -202.68, -202.731, -202.78099999999998, -202.831, -202.88099999999997,
          -202.93200000000002, -202.982, -203.032, -203.082, -203.13299999999998, -203.183, -203.233, -203.283,
          -203.334, -203.38400000000001, -203.43400000000003, -203.484, -203.535, -203.585, -203.635, -203.685,
          -203.736, -203.78599999999997, -203.83599999999998, -203.886, -203.937, -203.987, -204.037,
          -204.08700000000002, -204.138, -204.188, -204.238, -204.28799999999998, -204.33900000000003, -204.389,
          -204.43900000000002, -204.489, -204.54, -204.59, -204.64, -204.69, -204.74, -204.791, -204.84099999999998,
          -204.891, -204.94099999999997, -204.99200000000002, -205.042, -205.092, -205.142, -205.19299999999998,
          -205.243, -205.293, -205.343, -205.394, -205.44400000000002, -205.49400000000003, -205.544, -205.595,
          -205.645, -205.695, -205.745, -205.78599999999997, -205.688, -205.416]
    '''

    '''
    wx = [204.83700000000002, 202.83700000000002, 200.83700000000002, 198.83700000000002, 196.83700000000002,
         194.83700000000002, 192.83700000000002, 190.83700000000002, 188.83700000000002, 186.83700000000002,
         184.83700000000002, 182.83700000000002, 180.83700000000002, 178.83700000000002, 176.83700000000002,
         174.83700000000002, 172.83700000000002, 170.83700000000002, 168.83700000000002, 166.83700000000002,
         164.83700000000002, 162.83700000000002, 160.83700000000002, 158.83700000000002, 156.83700000000002,
         154.83700000000002, 152.83700000000002, 150.83700000000002, 148.83700000000002, 146.83700000000002,
         144.83700000000002, 142.83700000000002, 140.83700000000002, 138.83700000000002, 136.83700000000002,
         134.83700000000002, 132.83700000000002, 130.83700000000002, 128.83700000000002, 126.837, 124.837, 122.837,
         120.837, 118.837, 116.837, 114.837, 112.837, 110.837, 108.837, 106.837, 104.837, 102.90799999999999,
         101.11399999999999, 99.3509, 97.6348, 95.914, 94.2507, 92.6532, 91.0254, 89.37700000000001, 87.7286, 86.0917,
         84.5337, 82.8875, 81.1704, 79.4008, 77.6215, 75.8354, 74.0616, 72.3263, 70.6242, 69.1199, 67.7705, 66.6136,
         65.6817, 64.8597, 64.2654, 63.9346, 63.8755, 64.0897, 64.5717, 65.3394, 66.2142, 67.2878, 68.5498, 69.9733,
         71.528, 73.1808, 74.9567, 76.7527, 78.5541, 80.3383, 82.0827, 83.7651, 85.3645, 86.8682, 88.4695, 90.0708,
         91.7066, 93.6691]

    wy = [58.8, 58.8052, 58.8103, 58.8155, 58.8206, 58.8258, 58.8309, 58.8361, 58.8412, 58.8463, 58.8515, 58.8566,
         58.8618, 58.8669, 58.8721, 58.8772, 58.8824, 58.8875, 58.8927, 58.8978, 58.9029, 58.9081, 58.9132, 58.9184,
         58.9235, 58.9287, 58.9338, 58.93899999999999, 58.9441, 58.9493, 58.9544, 58.9595, 58.9647, 58.9698, 58.975,
         58.9801, 58.9853, 58.9904, 58.9956, 59.0007, 59.0058, 59.011, 59.0161, 59.0213, 59.0264, 59.0316, 59.0367,
         59.0419, 59.047, 59.0522, 59.0573, 59.0491, 58.8795, 58.5092, 57.941, 57.1966, 56.3315, 55.3502, 54.2355,
         53.1029, 51.9702, 50.8462, 49.9071, 49.133, 48.5321, 48.1108, 47.8866, 47.8794, 48.0889, 48.512, 49.1361,
         49.9388, 50.9809, 52.2334, 53.6612, 55.3643, 56.9778, 58.6652, 60.3837, 62.0898, 63.7403, 65.4037, 66.9408,
         68.3136, 69.5156, 70.521, 71.3084, 71.8612, 72.1915, 72.3414, 72.2889, 72.0345, 71.5814, 70.9355, 70.1047,
         69.0944, 67.8961, 66.6979, 65.4783, 64.3083]
    '''

    '''
    wx = [154.1616668701172, 154.1964569091797, 154.23123168945312, 154.26602172851562, 154.30079650878906, 154.33558654785156, 154.370361328125, 154.4051513671875, 154.43992614746094, 154.47471618652344, 154.50949096679688, 154.5442657470703, 154.5790557861328, 154.61383056640625, 154.64862060546875, 154.6833953857422, 154.7181854248047, 154.75296020507812, 154.78775024414062, 154.82252502441406, 154.85731506347656, 154.89210510253906, 155.005859375, 155.4144287109375, 156.1165008544922, 157.08767700195312, 158.28611755371094, 159.68080139160156, 161.22186279296875, 162.84832763671875, 164.73609924316406, 166.73609924316406, 168.73609924316406, 170.73609924316406, 172.73609924316406, 174.73609924316406, 176.73609924316406, 178.73609924316406, 180.7360992431641, 182.7360992431641, 184.7360992431641, 186.7360992431641, 188.7360992431641, 190.7360992431641, 192.7360992431641, 194.7360992431641, 196.7360992431641]

    wy = [-142.7616424560547, -144.76133728027344, -146.7610321044922, -148.76072692871094, -150.7604217529297, -152.76011657714844, -154.75982666015625, -156.759521484375, -158.75921630859375, -160.7589111328125, -162.75860595703125, -164.75831604003906, -166.7580108642578, -168.75770568847656, -170.7574005126953, -172.75709533691406, -174.7567901611328, -176.75650024414062, -178.75619506835938, -180.7558898925781, -182.75558471679688, -184.7552947998047, -186.5110321044922, -188.1313781738281, -189.64779663085938, -191.00765991210938, -192.1497039794922, -193.02865600585938, -193.6141357421875, -193.8829498291016, -193.8999938964844, -193.8999938964844, -193.8999938964844, -193.8999938964844, -193.8999938964844, -193.8999938964844, -193.8999938964844, -193.8999938964844, -193.8999938964844, -193.8999938964844, -193.8999938964844, -193.8999938964844, -193.8999938964844, -193.8999938964844, -193.8999938964844, -193.8999938964844, -193.8999938964844]
    '''

    wx = [-20.13974952697754, -18.85443878173828, -17.408775329589847, -16.11416244506836, -14.98143196105957, -13.989171981811525, -13.146142959594727, -12.459784507751465, -11.936156272888185, -11.56192111968994, -11.207012176513672, -10.88370132446289, -10.614882469177246, -10.400311470031738, -10.240154266357422, -10.134538650512695, -10.08354663848877, -10.069780349731444, -10.057125091552734, -10.04447078704834, -10.031815528869627, -10.019161224365234, -10.006505966186523, -9.993851661682127, -9.981196403503418, -9.968542098999023, -9.955886840820312, -9.943232536315918, -9.930577278137207, -9.917922973632812, -9.905267715454102, -9.892613410949707, -9.879958152770996, -9.867303848266602, -9.85464859008789, -9.841994285583496, -9.829339027404783, -9.81668472290039, -9.80402946472168, -9.791375160217283, -9.77872085571289, -9.76606559753418, -9.753411293029783, -9.740756034851074, -9.72810173034668, -9.715446472167967]

    wy = [12.962371826171875, 14.706084251403807, 16.31934928894043, 17.68838882446289, 19.131845474243164, 20.675241470336914, 22.30494880676269, 24.00658226013184, 25.765121459960934, 27.61520004272461, 29.583457946777344, 31.51069259643555, 33.442977905273445, 35.382041931152344, 37.32635116577149, 39.27438735961914, 41.22461700439453, 43.21441650390625, 45.21437454223633, 47.21433639526367, 49.21429443359375, 51.214256286621094, 53.21421432495117, 55.21417617797852, 57.214134216308594, 59.21409606933594, 61.21405410766602, 63.21401596069336, 65.21397399902344, 67.21392822265625, 69.21389007568361, 71.21385192871094, 73.21381378173828, 75.2137680053711, 77.21372985839844, 79.21369171142578, 81.21365356445312, 83.21360778808594, 85.21356964111328, 87.21353149414062, 89.21349334716797, 91.21344757080078, 93.21340942382812, 95.21337127685548, 97.2133331298828, 99.21328735351562]

    wx = [-64.14607238769531, -62.1465835571289, -60.1470947265625, -58.14760971069336, -56.14812088012695, -54.14863204956055, -52.14914321899414, -50.149658203125, -48.150169372558594, -46.15068054199219, -44.15119552612305, -42.15170669555664, -40.15221786499024, -38.15272903442383, -36.15324401855469, -34.15375518798828, -32.154266357421875, -30.15477752685547, -28.15529060363769, -26.15580177307129, -24.15631484985352, -22.15682601928711, -20.157339096069336, -18.15785026550293, -16.13948631286621, -14.043357849121096, -11.958106994628904, -9.890597343444824, -7.847637176513673, -5.835949897766112, -3.756316661834717, -1.7241026163101196, -0.060547906905412674, 1.1387872695922852, 1.8050090074539185, 1.928619623184204, 1.9159648418426516, 1.9033100605010984, 1.890655279159546, 1.8780004978179927, 1.8653457164764404, 1.852690935134888, 1.840036153793335, 1.827381491661072, 1.814726710319519]

    wy = [135.42132568359378, 135.37606811523438, 135.33079528808594, 135.28553771972656, 135.24028015136722, 135.19500732421878, 135.14974975585938, 135.1044921875, 135.05921936035156, 135.01396179199222, 134.96868896484378, 134.92343139648438, 134.878173828125, 134.83290100097656, 134.78764343261722, 134.74238586425778, 134.69711303710938, 134.65185546875, 134.60659790039062, 134.56132507324222, 134.51606750488278, 134.47080993652344, 134.425537109375, 134.38027954101562, 134.33259582519528, 134.20307922363278, 133.95353698730472, 133.5848388671875, 133.09815979003906, 132.4951171875, 131.69935607910156, 130.39532470703122, 128.64517211914062, 126.54946899414062, 124.22857666015624, 121.94512176513672, 119.94515991210938, 117.94520568847656, 115.94524383544922, 113.94528198242188, 111.94532012939452, 109.94536590576172, 107.94540405273438, 105.94544219970705, 103.94548034667969]

    # obstacle lists
    ob = np.array([[20.0, 10.0],
                   [30.0, 6.0],
                   [30.0, 8.0],
                   [35.0, 8.0],
                   [50.0, 3.0]
                   ])

    tx, ty, tyaw, tc, csp = generate_target_course(wx, wy)

    # initial state
    c_speed = 10.0 / 3.6  # current speed [m/s]
    c_d = 2.0  # current lateral position [m]
    c_d_d = 0.0  # current lateral speed [m/s]
    c_d_dd = 0.0  # current latral acceleration [m/s]
    s0 = 0.0  # current course position

    area = 20.0  # animation area length [m]

    test = 0

    for i in range(SIM_LOOP):
        path = frenet_optimal_planning(
            csp, s0, c_speed, c_d, c_d_d, c_d_dd, ob)

        if (test == 0):
            print(dir(path))
            print(path.x)
            print(path.y)
            print(path.yaw)
            print("Length of X = {}, Y = {}, Yaw = {}".format(len(path.x), len(path.y), len(path.yaw)))
            # print(path.__class__)
            test = 1

        s0 = path.s[1]
        c_d = path.d[1]
        c_d_d = path.d_d[1]
        c_d_dd = path.d_dd[1]
        c_speed = path.s_d[1]

        if np.hypot(path.x[1] - tx[-1], path.y[1] - ty[-1]) <= 1.0:
            print("Goal")
            break

        # Whats the steering

        yaw_current = path.yaw[0]
        yaw_future  = path.yaw[4]

        yaw_diff = yaw_current - yaw_future
        print(yaw_diff)

        if show_animation:  # pragma: no cover
            plt.cla()
            plt.plot(tx, ty)
            plt.plot(ob[:, 0], ob[:, 1], "xk")
            plt.plot(path.x[1:], path.y[1:], "-or")
            plt.plot(path.x[1], path.y[1], "vc")
            plt.xlim(path.x[1] - area, path.x[1] + area)
            plt.ylim(path.y[1] - area, path.y[1] + area)
            plt.title("v[km/h]:" + str(c_speed * 3.6)[0:4])
            plt.grid(True)
            plt.pause(0.0001)

    print("Finish")
    if show_animation:  # pragma: no cover
        plt.grid(True)
        plt.pause(0.0001)
        plt.show()


if __name__ == '__main__':
    main()
